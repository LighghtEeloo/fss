#!/usr/bin/env lua

local fs = require("pl.path")
local utils = require("utils")

local home_dir = os.getenv("HOME")
local config_dir = fs.join(home_dir, ".config", "fss")
if fs.exists(config_dir) then
    package.path = package.path..";"..config_dir.."?.lua"
end
local rc = require("rc")

local noticeable = rc.noticeable
local expandable = rc.expandable
local depth_limit = rc.depth_limit

local starts_with = utils.starts_with
local split = utils.split

Pattern = {}

function Pattern:new(cons)
    local pat = split(cons, ".")
    setmetatable(pat, self)
    self.__index = self
    return pat
end

function Pattern:match(path)
    local len
    for _, p in ipairs(self) do
        _, len = path:find(p)
        if len then
            path = path:sub(len+1, #path)
        else
            return false
        end
    end
    return true
end

function Pattern:match_memo(memo)
    local res = {}
    for _, path in ipairs(memo) do
        if self:match(path) then
            table.insert(res, path)
        end
    end
    return res
end


-- pattern search under path
local function search(pat, base, depth)
    depth = depth or 1
    local memo = {}
    local res = {}
    if depth_limit(depth) then return res end
    for face in fs.dir(base) do
        if noticeable(base, face) then
            local path = base..'/'..face
            if pat:match(path) then
                table.insert(res, path)
            elseif expandable(base, face) then
                table.insert(memo, path)
            end
        end
    end
    for _, path in ipairs(memo) do
        local memo_ = search(pat, path, depth + 1)
        for _, path_ in ipairs(memo_) do
            table.insert(res, path_)
        end
    end
    return res
end


-- main
local function main()
    if #arg < 1 then
        io.stderr:write("usage:\tlua ", arg[0], " <PATTERNS> <PATH>{ <PATH>}\n")
        io.stderr:write("where:\t<PATH>     ::= / | /<name>{/<name>} | <name>{/<name>}\n")
        io.stderr:write("      \t<PATTERNS> ::= <PATTERN>{,<PATTERN>}\n")
        io.stderr:write("      \t<PATTERN>  ::= <cstr>{.<cstr>}\n")
        io.stderr:write("      \t<cstr>     ::= <consecutive str>\n")
        io.stderr:write("      \t<name>     ::= <file name>\n")
        io.stderr:write("      \t\n")
        io.stderr:write("means:\tgiven a group of patterns, \n")
        io.stderr:write("      \tuse each pattern to search in all paths recursively;\n")
        io.stderr:write("      \tand output the combined results in stdout.\n")
        io.stderr:write("      \t\n")
        io.stderr:write(" also:\tif one path already satisfies, its children will not be included\n")
        io.stderr:write("      \t\n")
        io.stderr:write(" e.g.:\tX.482.H    :   1 pattern, which finds Xpace/EECS-482/Homeworks\n")
        io.stderr:write(" e.g.:\tXp.e.482.H :   1 pattern, does the same\n")
        io.stderr:write(" e.g.:\tXe.482.H   :   1 pattern, but fails the prev search\n")
        io.stderr:write(" e.g.:\tX.482.H,Y  :   2 patterns, find [<prev search>, Yggdrasill]\n")
        io.stderr:write("                       but no more children under Yggdrasill\n")
        return 1
    end
    local pats = {}
    for _, p in ipairs(split(arg[1], ",")) do
        local pat = Pattern:new(p)
        table.insert(pats, pat)
    end
    if #arg < 2 then
        arg[2] = fs.currentdir()
    end
    local res = {}
    for _, pat in ipairs(pats) do
        for i=2,#arg do
            local path = arg[i]
            if not starts_with(arg[i], '/') then
                path = fs.currentdir()..'/'..path
            end
            local res_ = search(pat, path)
            for _, path_ in ipairs(res_) do
                table.insert(res, path_)
            end
        end
    end
    for _, r in ipairs(res) do
        print(r)
    end
end

-- run main
os.exit(main())
